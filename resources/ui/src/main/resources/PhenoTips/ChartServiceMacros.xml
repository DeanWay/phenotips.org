<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>ChartServiceMacros</name>
  <language />
  <defaultLanguage />
  <translation>0</translation>
  <creator>XWiki.Admin</creator>
  <creationDate>1332798937000</creationDate>
  <parent>PhenoTips.ChartService</parent>
  <author>XWiki.sdumitriu</author>
  <contentAuthor>XWiki.sdumitriu</contentAuthor>
  <date>1411434812000</date>
  <contentUpdateDate>1411434812000</contentUpdateDate>
  <version>4.1</version>
  <title />
  <comment>Install extensoin [org.phenotips:patient-measurements-ui-1.0-rc-1]</comment>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro (_measurementCharts $options)
## ---------------------------------------------------------
## Initialization of 'global' vars
## ---------------------------------------------------------
#set ($measurements = {})
#set ($ageLimits = {})
#foreach ($measurementName in $services.measurements.getAvailableMeasurementNames())
  #set ($discard = $measurements.put($measurementName, []))
  #set ($discard = $ageLimits.put($measurementName, {'max': -1, 'min': 100000}))
#end
#set ($sex = false)
#set ($c = $xwiki.getDocument('PhenoTips.ChartGenerator').getContent())
#set ($service = $xwiki.getDocument('PhenoTips.ChartService'))
##
##
## ---------------------------------------------------------
## Build measurements data from objects
## ---------------------------------------------------------
#macro (_buildMeasurementsFromObjects $targetClassName $obj)
  #if (!$obj.getProperty('date_of_birth').value)
    #break
  #end
  #macro (_updateMeasurements $measurements $o $measurementName $age)
    #if ("$!{o.getProperty($measurementName).value}" != '')
      #if (!($ageLimits.get($measurementName).min &lt;= $age))
        #set ($ageLimits.get($measurementName).min = $age)
      #end
      #if (!($ageLimits.get($measurementName).max >= $age))
        #set ($ageLimits.get($measurementName).max = $age)
      #end
      #set ($discard = $measurements.add({'a': $age, 'x' : $o.getProperty($measurementName).value}))
    #end
  #end
  #set ($bDate = $services.jodatime.getMutableDateTime($obj.getProperty('date_of_birth').value.time).toMutableDateTime($services.jodatime.getUTCTimezone()))
  #foreach ($o in $doc.getObjects($targetClassName))
    #if ($o.getProperty('date') &amp;&amp; $o.getProperty('date').value)
      #set ($mDate = $services.jodatime.getMutableDateTime($o.getProperty('date').value.time).toMutableDateTime($services.jodatime.getUTCTimezone()))
      #set ($age = $mDate.toInstant().minus($bDate.toInstant().getMillis()).toDateTime($services.jodatime.getUTCTimezone()))
      #set ($age = ($age.year - 1970) * 12 + $age.monthOfYear - 1)
    #else
      #set ($age = $o.getProperty('age').value)
    #end
    #if ($age >= 0)
      #foreach ($measurementName in $services.measurements.getAvailableMeasurementNames())
        #_updateMeasurements($measurements.get($measurementName) $o $measurementName $age)
      #end
    #end
  #end
  #set ($sex = $obj.getProperty('gender').value != 'F')
#end
##
##
## ---------------------------------------------------------
## Build measurements data from request
## ---------------------------------------------------------
#macro (_buildMeasurementsFromRequest)
  #macro (_buildMeasurementFromRequest $measurements $measurementName)
    #foreach ($m in $request.getParameterValues($measurementName))
      #if ("$!{m}" != '')
        #set ($age = $mathtool.toInteger($ages.get($foreach.index)))
        #if (!($ageLimits.get($measurementName).min &lt;= $age))
          #set ($ageLimits.get($measurementName).min = $age)
        #end
        #if (!($ageLimits.get($measurementName).max >= $age))
          #set ($ageLimits.get($measurementName).max = $age)
        #end
        #set ($discard = $measurements.add({'a': $age, 'x' : $mathtool.toDouble($m)}))
      #end
    #end
  #end
  #set ($ages = $request.getParameterValues('a'))
  #foreach ($measurementName in $services.measurements.getAvailableMeasurementNames())
    #_buildMeasurementFromRequest($measurements.get($measurementName) $measurementName)
  #end
  #set ($sex = ($request.getParameter('s') != 'F'))
#end
##
##
## ---------------------------------------------------------
## Detect compatible image "format" based on the current browser
## ---------------------------------------------------------
#macro(_detectChartFormat)
  #set($userAgentStr = $request.getHeader("User-Agent"))
  #if ($userAgentStr.contains('MSIE'))
    #set($format = 'raster')
  #else
    #set($format = 'vector')
  #end
$format##
#end
##
##
## ---------------------------------------------------------
## Generate charts for a specific measurement
## ---------------------------------------------------------
#macro (_generateCharts $measurements $measurementName)
  #if (!$measurements.isEmpty())
    #set ($chartConfigurations = [])
    #foreach ($chartConfiguration in $services.measurements.get($measurementName).getChartsConfigurations())
      #if ($chartConfiguration.lowerAgeLimit &lt;= $ageLimits.get($measurementName).min)
        #set ($chartConfigurations = [])
      #end
      #set ($discard = $chartConfigurations.add($chartConfiguration))
      #if ($chartConfiguration.upperAgeLimit > $ageLimits.get($measurementName).max)
        #break
      #end
    #end
    #foreach ($chartConfiguration in $chartConfigurations)
      #_generateChart($measurements, $chartConfiguration)
    #end
  #end
#end
##
##
## ---------------------------------------------------------
## Generate chart for a specific measurement and age span
## ---------------------------------------------------------
#macro (_generateChart $measurements $chartConfiguration)
  #if (!$measurements.isEmpty())
    #set ($svg = "#evaluate($c)")
    #set ($queryString = "n=${chartConfiguration.measurementType}#if(!$sex)&amp;s=F#end")
    #foreach ($m in $measurements)
      #if ($m.a >= $chartConfiguration.lowerAgeLimit &amp;&amp; $m.a &lt; $chartConfiguration.upperAgeLimit)
        #set ($queryString = "${queryString}&amp;a=${m.a}&amp;${chartConfiguration.measurementType}=${m.x}")
      #end
    #end
    #if ($options.format == 'raster' || "#_detectChartFormat()" == 'raster')
      #set ($svg = $svg.replaceAll('\{\{/?html.*?}}', '').trim())
      #set ($src = $xwiki.svg.getSVGImageURL($svg, $chartHeight, $chartWidth))
    #else
      #set ($src = $service.getURL('get', "${queryString}&amp;standalone=1"))
    #end
    #if ($options.standalone)
      #if ($options.format == 'raster')
        $response.sendRedirect($src)
      #elseif($doc != $service || $xcontext.action != 'get')
        $response.sendRedirect($service.getURL('get', $queryString))
      #else
        $response.setContentType('image/svg+xml')
        $svg
      #end
    #else
      #if ($options.format == 'raster')
        #set ($img = "&lt;img style='width:100%' title='$chartConfiguration.chartTitle' src='$src'/>")
      #else
        #set ($img = $svg.replaceAll('\{\{/?html.*?}}', '').trim())
      #end
      #if ($options.link)
        {{html clean="false"}}&lt;a target="_blank" href="$src" class="chart-wrapper">$img&lt;/a>{{/html}}##
      #elseif ($options.fullscreen || $xcontext.action == 'export')
        {{html clean="false"}}&lt;div style="width:100%;">$img&lt;/div>{{/html}}##
      #else
        {{html clean="false"}}&lt;div class="chart-wrapper">$img&lt;/div>{{/html}}##
      #end
    #end
  #end
#end
##
##
##
## ---------------------------------------------------------
## Decide which method to use for building measurement data
## ---------------------------------------------------------
#if ($options.targetClassName &amp;&amp; $options.obj)
  #_buildMeasurementsFromObjects($options.targetClassName $options.obj)
#else
  #_buildMeasurementsFromRequest()
#end
## ---------------------------------------------------------
## Decide what charts to display and in which format
## ---------------------------------------------------------
#if ($options.chartName)
  #_generateCharts($measurements.get($options.chartName), $options.chartName)
#else
  ## ---------------------------------------------------------
  ## Generate all the charts for all the available data
  ## ---------------------------------------------------------
  #foreach ($measurementName in $services.measurements.getAvailableMeasurementNames())
    #_generateCharts($measurements.get($measurementName), $measurementName)
  #end
#end
##
## ---------------------------------------------------------
## All done
## ---------------------------------------------------------
#end## macro measurementCharts
{{/velocity}}</content>
</xwikidoc>