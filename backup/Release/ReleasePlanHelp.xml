<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>Release</web>
  <name>ReleasePlanHelp</name>
  <language />
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.Admin</creator>
  <creationDate>1399872238000</creationDate>
  <parent>Release.WebHome</parent>
  <author>XWiki.buske</author>
  <contentAuthor>XWiki.buske</contentAuthor>
  <date>1414607359000</date>
  <contentUpdateDate>1414607359000</contentUpdateDate>
  <version>17.1</version>
  <title>Release Plan Documentation</title>
  <comment />
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{box cssClass="floatinginfobox" title="**Contents**"}}&#xd;
{{toc/}}&#xd;
{{/box}}&#xd;
&#xd;
Contains instructions to perform various release steps in the [[Release Plans>>Release.WebHome]].&#xd;
&#xd;
= Set up your identity =&#xd;
&#xd;
* Make sure your git configuration has a proper username and email address: {{code language=sh}}git config --global user.name; git config --global user.email{{/code}}&#xd;
* If git fails to find your secret key for signing the tag during the release process you can use ##git config user.signingkey xxx## to specify the secret key to be used&#xd;
* [[Create a GPG key>>http://fedoraproject.org/wiki/Creating_GPG_Keys]] if you don't already have one: {{code language="sh"}}gpg --gen-key{{/code}}&#xd;
* Make sure gpg-agent is running, or you'll have to manually enter your GPG key passphrase literally 100 of times during the push to Nexus phase below&#xd;
** If releasing from a remote machine over SSH, run ##export GPG_TTY=`tty`## to make GPG use the right pin entry application, since by default it uses a GUI that won't work over SSH&#xd;
* Make sure you have an account on [[Nexus>>http://nexus.cs.toronto.edu]]; ask Sergiu for one if you don't&#xd;
* Make sure you have an account on [[phenotips.org>>Main.WebHome]]; make sure your account is in the "advanced" mode&#xd;
* Make sure you have your Nexus account configured in ##~~/.m2/settings.xml## (put your own username and password in the file):&#xd;
&#xd;
{{code language="xml"}}&#xd;
&lt;settings>&#xd;
  &lt;servers>&#xd;
    &lt;server>&#xd;
      &lt;id>nexus.cs.toronto.edu&lt;/id>&#xd;
      &lt;username>user&lt;/username>&#xd;
      &lt;password>pass&lt;/password>&#xd;
    &lt;/server>&#xd;
    &lt;server>&#xd;
      &lt;id>nexus.phenotips.org&lt;/id>&#xd;
      &lt;username>user&lt;/username>&#xd;
      &lt;password>pass&lt;/password>&#xd;
    &lt;/server>&#xd;
  &lt;/servers>&#xd;
&lt;/settings>&#xd;
{{/code}}&#xd;
&#xd;
= Build the release =&#xd;
&#xd;
(The build process creates an .rpm distribution among other things, so make sure the build machine has an `rpmbuild` utility installed)&#xd;
&#xd;
{{code language="sh"}}&#xd;
# Define a variable for the release version&#xd;
$ export VERSION=1.0-milestone-1&#xd;
# Make sure you are up to date&#xd;
$ git checkout master&#xd;
$ git pull&#xd;
$ git status&#xd;
# There shouldn't be any commits ahead of origin/master&#xd;
# Clean any uncommitted files&#xd;
# WARNING: this will remove all untracked files! Make sure there isn't any important code left uncommitted!&#xd;
# If you have such files and would like to keep it, create a new git clone instead&#xd;
$ git clean -dxf&#xd;
# Go to a release branch&#xd;
$ git checkout -b release-${VERSION}&#xd;
# Prepare the release:&#xd;
$ mvn release:prepare -DreleaseVersion=${VERSION} -DdevelopmentVersion=1.0-SNAPSHOT -Dtag=phenotips-${VERSION} -Pfunctional-tests&#xd;
# --------------------------&#xd;
# Now would be a good time to smoke-test the built zip file&#xd;
# --------------------------&#xd;
# Sign the tag&#xd;
$ git checkout phenotips-${VERSION}&#xd;
$ git tag -d phenotips-${VERSION}&#xd;
$ git tag -s -m "Tagging phenotips-${VERSION}" phenotips-${VERSION}&#xd;
# Verify the signature used&#xd;
git cat-file -p phenotips-${VERSION}&#xd;
# Push the tag&#xd;
$ git push origin phenotips-${VERSION}&#xd;
# Push the release artifacts to Nexus&#xd;
$ mvn release:perform -Pfunctional-tests&#xd;
# Cleanup&#xd;
$ git checkout master&#xd;
$ git branch -D release-${VERSION}&#xd;
{{/code}}&#xd;
&#xd;
= Restarting release build in case of a failure =&#xd;
&#xd;
In case ##mvn release:prepare ...## fails it is best to execute ##mvn release:clean## and ##git reset ~--hard origin/master## after fixing the problem and before another build attempt.&#xd;
&#xd;
Also if a failure occurs after the release has been tagged in git locally, make sure to remove the tag before building again: ##git tag -d phenotips-${VERSION}##</content>
</xwikidoc>